// Language data
const languages = {
  English: {
    name: 'English',
    code: 'en',
    translations: {
      title: 'Agricultural Schemes & Weather Dashboard',
      subtitle: 'Explore government agricultural schemes and get real-time weather updates for better farming decisions.',
      loadingWeather: 'Loading weather data...',
      errorWeather: 'Error loading weather data:',
      usingDemo: 'Using demo data for display purposes',
      view24Hour: 'View 24-Hour Forecast',
      hourlyForecast: '24-Hour Weather Forecast',
      placeholder: 'Type your message here...',
      chatHistory: 'ЁЯТм Chat History',
      settings: 'тЪЩя╕П Settings',
      profile: 'ЁЯСд Profile',
      helpSupport: 'тЭУ Help & Support',
      language: 'ЁЯМР Language',
      selectLanguage: 'Select your language',
      otherLanguages: 'Other languages',
      clickVisit: 'Click to visit official website',
      menu: 'Menu'
    }
  },
  рд╣рд┐рдВрджреА: {
    name: 'рд╣рд┐рдВрджреА',
    code: 'hi',
    translations: {
      title: 'рдХреГрд╖рд┐ рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рдореМрд╕рдо рдбреИрд╢рдмреЛрд░реНрдб',
      subtitle: 'рдмреЗрд╣рддрд░ рдХреГрд╖рд┐ рдирд┐рд░реНрдгрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд░рдХрд╛рд░реА рдХреГрд╖рд┐ рдпреЛрдЬрдирд╛рдУрдВ рдХрд╛ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░реЗрдВ рдФрд░ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рдХреЗ рдореМрд╕рдо рдЕрдкрдбреЗрдЯ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред',
      loadingWeather: 'рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
      errorWeather: 'рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:',
      usingDemo: 'рдкреНрд░рджрд░реНрд╢рди рдЙрджреНрджреЗрд╢реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рдбреЗрдореЛ рдбреЗрдЯрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ',
      view24Hour: '24-рдШрдВрдЯреЗ рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рджреЗрдЦреЗрдВ',
      hourlyForecast: '24-рдШрдВрдЯреЗ рдХрд╛ рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
      placeholder: 'рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...',
      chatHistory: 'ЁЯТм рдЪреИрдЯ рдЗрддрд┐рд╣рд╛рд╕',
      settings: 'тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
      profile: 'ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓',
      helpSupport: 'тЭУ рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рд╕рдорд░реНрдерди',
      language: 'ЁЯМР рднрд╛рд╖рд╛',
      selectLanguage: 'рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
      otherLanguages: 'рдЕрдиреНрдп рднрд╛рд╖рд╛рдПрдВ',
      clickVisit: 'рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ',
      menu: 'рдореЗрдиреНрдпреВ'
    }
  },
  ркЧрлБркЬрк░рк╛ркдрлА: {
    name: 'ркЧрлБркЬрк░рк╛ркдрлА',
    code: 'gu',
    translations: {
      title: 'ркХрлГрк╖рк┐ ркпрлЛркЬркирк╛ркУ ркЕркирлЗ рк╣рк╡рк╛ркорк╛рки ркбрлЗрк╢ркмрлЛрк░рлНркб',
      subtitle: 'рк╡ркзрлБ рк╕рк╛рк░рк╛ ркЦрлЗркдрлА ркирк┐рк░рлНркгркпрлЛ ркорк╛ркЯрлЗ рк╕рк░ркХрк╛рк░рлА ркХрлГрк╖рк┐ ркпрлЛркЬркирк╛ркУркирлБркВ ркЕркирлНрк╡рлЗрк╖ркг ркХрк░рлЛ ркЕркирлЗ рк╡рк╛рк╕рлНркдрк╡рк┐ркХ рк╕ркоркпркирк╛ рк╣рк╡рк╛ркорк╛рки ркЕрккркбрлЗркЯ ркорлЗрк│рк╡рлЛред',
      loadingWeather: 'рк╣рк╡рк╛ркорк╛рки ркбрлЗркЯрк╛ рк▓рлЛркб ркеркИ рк░рк╣рлНркпрлЛ ркЫрлЗ...',
      errorWeather: 'рк╣рк╡рк╛ркорк╛рки ркбрлЗркЯрк╛ рк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркнрлВрк▓:',
      usingDemo: 'рккрлНрк░ркжрк░рлНрк╢рки рк╣рлЗркдрлБркУ ркорк╛ркЯрлЗ ркбрлЗркорлЛ ркбрлЗркЯрк╛ркирлЛ ркЙрккркпрлЛркЧ',
      view24Hour: '24-ркХрк▓рк╛ркХркирлА ркЖркЧрк╛рк╣рлА ркЬрлБркУ',
      hourlyForecast: '24-ркХрк▓рк╛ркХркирлА рк╣рк╡рк╛ркорк╛рки ркЖркЧрк╛рк╣рлА',
      placeholder: 'ркЕрк╣рлАркВ ркдркорк╛рк░рлЛ рк╕ркВркжрлЗрк╢ ркЯрк╛ркИркк ркХрк░рлЛ...',
      chatHistory: 'ЁЯТм ркЪрлЗркЯ рк╣рк┐рк╕рлНркЯрлНрк░рлА',
      settings: 'тЪЩя╕П рк╕рлЗркЯрк┐ркВркЧрлНрк╕',
      profile: 'ЁЯСд рккрлНрк░рлЛрклрк╛ркИрк▓',
      helpSupport: 'тЭУ ркоркжркж ркЕркирлЗ рк╕рккрлЛрк░рлНркЯ',
      language: 'ЁЯМР ркнрк╛рк╖рк╛',
      selectLanguage: 'ркдркорк╛рк░рлА ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ',
      otherLanguages: 'ркЕркирлНркп ркнрк╛рк╖рк╛ркУ',
      clickVisit: 'рк╕ркдрлНркдрк╛рк╡рк╛рк░ рк╡рлЗркмрк╕рк╛ркИркЯ рккрк░ ркЬрк╡рк╛ ркорк╛ркЯрлЗ ркХрлНрк▓рк┐ркХ ркХрк░рлЛ',
      menu: 'ркорлЗркирлБ'
    }
  },
  родрооро┐ро┤рпН: {
    name: 'родрооро┐ро┤рпН',
    code: 'ta',
    translations: {
      title: 'ро╡ро┐ро╡роЪро╛роп родро┐роЯрпНроЯроЩрпНроХро│рпН & ро╡ро╛ройро┐ро▓рпИ роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ',
      subtitle: 'роЪро┐ро▒роирпНрод ро╡ро┐ро╡роЪро╛роп роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ роЕро░роЪрпБ ро╡ро┐ро╡роЪро╛роп родро┐роЯрпНроЯроЩрпНроХро│рпИ роЖро░ро╛ропрпНроирпНродрпБ роиро┐роХро┤рпНроирпЗро░ ро╡ро╛ройро┐ро▓рпИ рокрпБродрпБрокрпНрокро┐рокрпНрокрпБроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН.',
      loadingWeather: 'ро╡ро╛ройро┐ро▓рпИ родро░ро╡рпБ роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ...',
      errorWeather: 'ро╡ро╛ройро┐ро▓рпИ родро░ро╡рпИ роПро▒рпНро▒рпБро╡родро┐ро▓рпН рокро┐ро┤рпИ:',
      usingDemo: 'роХро╛роЯрпНроЪро┐ роирпЛроХрпНроХроЩрпНроХро│рпБроХрпНроХро╛роХ роЯрпЖроорпЛ родро░ро╡рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБродро▓рпН',
      view24Hour: '24-роорогро┐роирпЗро░ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН',
      hourlyForecast: '24-роорогро┐роирпЗро░ ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
      placeholder: 'роЙроЩрпНроХро│рпН роЪрпЖропрпНродро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН...',
      chatHistory: 'ЁЯТм роЕро░роЯрпНроЯрпИ ро╡ро░ро▓ро╛ро▒рпБ',
      settings: 'тЪЩя╕П роЕроорпИрокрпНрокрпБроХро│рпН',
      profile: 'ЁЯСд роЪрпБропро╡ро┐ро╡ро░роорпН',
      helpSupport: 'тЭУ роЙродро╡ро┐ & роЖродро░ро╡рпБ',
      language: 'ЁЯМР роорпКро┤ро┐',
      selectLanguage: 'роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
      otherLanguages: 'рокро┐ро▒ роорпКро┤ро┐роХро│рпН',
      clickVisit: 'роЕродро┐роХро╛ро░рокрпНрокрпВро░рпНро╡ роЗрогрпИропродро│родрпНродро┐ро▒рпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН',
      menu: 'роорпЖройрпБ'
    }
  },
  р░др▒Жр░▓р▒Бр░Чр▒Б: {
    name: 'р░др▒Жр░▓р▒Бр░Чр▒Б',
    code: 'te',
    translations: {
      title: 'р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░ер░Хр░╛р░▓р▒Б & р░╡р░╛р░др░╛р░╡р░░р░г р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н',
      subtitle: 'р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░░р▒Нр░гр░пр░╛р░▓ р░Хр▒Лр░╕р░В р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░ер░Хр░╛р░▓р░ир▒Б р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░ир░┐р░Ь-р░╕р░ор░п р░╡р░╛р░др░╛р░╡р░░р░г р░Ер░кр▒НтАМр░бр▒Зр░Яр▒НтАМр░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐.',
      loadingWeather: 'р░╡р░╛р░др░╛р░╡р░░р░г р░бр▒Зр░Яр░╛ р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...',
      errorWeather: 'р░╡р░╛р░др░╛р░╡р░░р░г р░бр▒Зр░Яр░╛ р░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░▓р▒Лр░кр░В:',
      usingDemo: 'р░кр▒Нр░░р░жр░░р▒Нр░╢р░и р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░▓ р░Хр▒Лр░╕р░В р░бр▒Жр░ор▒Л р░бр▒Зр░Яр░╛р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░бр░В',
      view24Hour: '24-р░Чр░Вр░Яр░▓ р░Ер░Вр░Ър░ир░╛р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐',
      hourlyForecast: '24-р░Чр░Вр░Яр░▓ р░╡р░╛р░др░╛р░╡р░░р░г р░Ер░Вр░Ър░ир░╛',
      placeholder: 'р░ор▒А р░╕р░Вр░жр▒Зр░╢р░╛р░ир▒Нр░ир░┐ р░Зр░Хр▒Нр░Хр░б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...',
      chatHistory: 'ЁЯТм р░Ър░╛р░Яр▒Н р░Ър░░р░┐р░др▒Нр░░',
      settings: 'тЪЩя╕П р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б',
      profile: 'ЁЯСд р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н',
      helpSupport: 'тЭУ р░╕р░╣р░╛р░пр░В & р░ор░жр▒Нр░жр░др▒Б',
      language: 'ЁЯМР р░нр░╛р░╖',
      selectLanguage: 'р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
      otherLanguages: 'р░Зр░др░░ р░нр░╛р░╖р░▓р▒Б',
      clickVisit: 'р░Ер░зр░┐р░Хр░╛р░░р░┐р░Х р░╡р▒Жр░мр▒НтАМр░╕р▒Ир░Яр▒НтАМр░ир░┐ р░╕р░Вр░жр░░р▒Нр░╢р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      menu: 'р░ор▒Жр░ир▒В'
    }
  },
  ржмрж╛ржВрж▓рж╛: {
    name: 'ржмрж╛ржВрж▓рж╛',
    code: 'bn',
    translations: {
      title: 'ржХрзГрж╖рж┐ ржкрзНрж░ржХрж▓рзНржк ржУ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб',
      subtitle: 'ржЙржирзНржиржд ржХрзГрж╖рж┐ рж╕рж┐ржжрзНржзрж╛ржирзНрждрзЗрж░ ржЬржирзНржп рж╕рж░ржХрж╛рж░рж┐ ржХрзГрж╖рж┐ ржкрзНрж░ржХрж▓рзНржкржЧрзБрж▓рж┐ ржЕржирзНржмрзЗрж╖ржг ржХрж░рзБржи ржПржмржВ рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржЖржкржбрзЗржЯ ржкрж╛ржиред',
      loadingWeather: 'ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржбрзЗржЯрж╛ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...',
      errorWeather: 'ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐:',
      usingDemo: 'ржкрзНрж░ржжрж░рзНрж╢ржирзЗрж░ ржЙржжрзНржжрзЗрж╢рзНржпрзЗ ржбрзЗржорзЛ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ',
      view24Hour: 'рзирзк-ржШржирзНржЯрж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрзЗржЦрзБржи',
      hourlyForecast: 'рзирзк-ржШржирзНржЯрж╛рж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
      placeholder: 'ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛ ржЯрж╛ржЗржк ржХрж░рзБржи...',
      chatHistory: 'ЁЯТм ржЪрзНржпрж╛ржЯ ржЗрждрж┐рж╣рж╛рж╕',
      settings: 'тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕',
      profile: 'ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓',
      helpSupport: 'тЭУ рж╕рж╛рж╣рж╛ржпрзНржп ржУ рж╕рж╣рж╛ржпрж╝рждрж╛',
      language: 'ЁЯМР ржнрж╛рж╖рж╛',
      selectLanguage: 'ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
      otherLanguages: 'ржЕржирзНржпрж╛ржирзНржп ржнрж╛рж╖рж╛',
      clickVisit: 'ржЕржлрж┐рж╕рж┐ржпрж╝рж╛рж▓ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржкрж░рж┐ржжрж░рзНрж╢ржи ржХрж░рждрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
      menu: 'ржорзЗржирзБ'
    }
  },
  рдорд░рд╛рдареА: {
    name: 'рдорд░рд╛рдареА',
    code: 'mr',
    translations: {
      title: 'рдХреГрд╖реА рдпреЛрдЬрдирд╛ рдЖрдгрд┐ рд╣рд╡рд╛рдорд╛рди рдбреЕрд╢рдмреЛрд░реНрдб',
      subtitle: 'рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рд╢реЗрддреА рдирд┐рд░реНрдгрдпрд╛рдВрд╕рд╛рдареА рд╕рд░рдХрд╛рд░реА рдХреГрд╖реА рдпреЛрдЬрдирд╛рдВрдЪрд╛ рд╢реЛрдз рдШреНрдпрд╛ рдЖрдгрд┐ рд░рд┐рдЕрд▓-рдЯрд╛рдЗрдо рд╣рд╡рд╛рдорд╛рди рдЕрдкрдбреЗрдЯ рдорд┐рд│рд╡рд╛.',
      loadingWeather: 'рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛрдд рдЖрд╣реЗ...',
      errorWeather: 'рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░рдгреНрдпрд╛рдд рддреНрд░реБрдЯреА:',
      usingDemo: 'рдкреНрд░рджрд░реНрд╢рди рд╣реЗрддреВрдВрд╕рд╛рдареА рдбреЗрдореЛ рдбреЗрдЯрд╛ рд╡рд╛рдкрд░рдд рдЖрд╣реЗ',
      view24Hour: '24-рддрд╛рд╕рд╛рдВрдЪрд╛ рдЕрдВрджрд╛рдЬ рдкрд╣рд╛',
      hourlyForecast: '24-рддрд╛рд╕рд╛рдВрдЪрд╛ рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ',
      placeholder: 'рдпреЗрдереЗ рддреБрдордЪрд╛ рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░рд╛...',
      chatHistory: 'ЁЯТм рдЪреЕрдЯ рдЗрддрд┐рд╣рд╛рд╕',
      settings: 'тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
      profile: 'ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓',
      helpSupport: 'тЭУ рдорджрдд рдЖрдгрд┐ рд╕рдорд░реНрдерди',
      language: 'ЁЯМР рднрд╛рд╖рд╛',
      selectLanguage: 'рддреБрдордЪреА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛',
      otherLanguages: 'рдЗрддрд░ рднрд╛рд╖рд╛',
      clickVisit: 'рдЕрдзрд┐рдХреГрдд рд╡реЗрдмрд╕рд╛рдЗрдЯрд▓рд╛ рднреЗрдЯ рджреЗрдгреНрдпрд╛рд╕рд╛рдареА рдХреНрд▓рд┐рдХ рдХрд░рд╛',
      menu: 'рдореЗрдиреВ'
    }
  },
  р▓Хр▓ир│Нр▓ир▓б: {
    name: 'р▓Хр▓ир│Нр▓ир▓б',
    code: 'kn',
    translations: {
      title: 'р▓Хр│Гр▓╖р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓бр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Лр▓░р│Нр▓бр│Н',
      subtitle: 'р▓Йр▓др│Нр▓др▓о р▓Хр│Гр▓╖р▓┐ р▓ир▓┐р▓░р│Нр▓зр▓╛р▓░р▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓Хр│Гр▓╖р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Ер▓ир│Нр▓╡р│Зр▓╖р▓┐р▓╕р▓┐ р▓ор▓др│Нр▓др│Б р▓ир│Ир▓Ь-р▓╕р▓ор▓пр▓ж р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ир▓╡р│Ар▓Хр▓░р▓гр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐.',
      loadingWeather: 'р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓бр│Зр▓Яр▓╛ р▓▓р│Лр▓бр│Н р▓Жр▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
      errorWeather: 'р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓бр│Зр▓Яр▓╛ р▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓жр│Лр▓╖:',
      usingDemo: 'р▓кр│Нр▓░р▓жр▓░р│Нр▓╢р▓и р▓Йр▓жр│Нр▓жр│Зр▓╢р▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓бр│Жр▓ор│К р▓бр│Зр▓Яр▓╛ р▓мр▓│р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж',
      view24Hour: '24-р▓Чр▓Вр▓Яр│Жр▓Чр▓│ р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж р▓╡р│Ар▓Хр│Нр▓╖р▓┐р▓╕р▓┐',
      hourlyForecast: '24-р▓Чр▓Вр▓Яр│Жр▓Чр▓│ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓╕р│Вр▓Ър▓ир│Ж',
      placeholder: 'р▓ир▓┐р▓ор│Нр▓о р▓╕р▓Вр▓жр│Зр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Зр▓▓р│Нр▓▓р▓┐ р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐...',
      chatHistory: 'ЁЯТм р▓Ър▓╛р▓Яр│Н р▓Зр▓др▓┐р▓╣р▓╛р▓╕',
      settings: 'тЪЩя╕П р▓╕р│Жр▓Яр│Нр▓Яр▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р│Б',
      profile: 'ЁЯСд р▓кр│Нр▓░р│Кр▓лр│Ир▓▓р│Н',
      helpSupport: 'тЭУ р▓╕р▓╣р▓╛р▓п р▓ор▓др│Нр▓др│Б р▓мр│Жр▓Вр▓мр▓▓',
      language: 'ЁЯМР р▓нр▓╛р▓╖р│Ж',
      selectLanguage: 'р▓ир▓┐р▓ор│Нр▓о р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐',
      otherLanguages: 'р▓Зр▓др▓░ р▓нр▓╛р▓╖р│Жр▓Чр▓│р│Б',
      clickVisit: 'р▓Ер▓зр▓┐р▓Хр│Гр▓д р▓╡р│Жр▓мр│НтАМр▓╕р│Ир▓Яр│НтАМр▓Чр│Ж р▓нр│Зр▓Яр▓┐ р▓ир│Ар▓бр▓▓р│Б р▓Хр│Нр▓▓р▓┐р▓Хр│Н р▓ор▓╛р▓бр▓┐',
      menu: 'р▓ор│Жр▓ир│Б'
    }
  },
  рикрй░риЬри╛римрйА: {
    name: 'рикрй░риЬри╛римрйА',
    code: 'pa',
    translations: {
      title: 'риЦрйЗридрйАримри╛рйЬрйА ри╕риХрйАриори╛риВ риЕридрйЗ риорйМри╕рио рибрйИри╕ри╝римрйЛри░риб',
      subtitle: 'римри┐ри╣ридри░ риЦрйЗридрйА рижрйЗ рилрйИри╕ри▓ри┐риЖриВ ри▓риИ ри╕ри░риХри╛ри░рйА риЦрйЗридрйАримри╛рйЬрйА ри╕риХрйАриори╛риВ рижрйА рикрйЬриЪрйЛри▓ риХри░рйЛ риЕридрйЗ ри░рйАриЕри▓-риЯри╛риИрио риорйМри╕рио риЕрикрибрйЗриЯ рикрйНри░ри╛рикрид риХри░рйЛред',
      loadingWeather: 'риорйМри╕рио рижри╛ рибрйЗриЯри╛ ри▓рйЛриб ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...',
      errorWeather: 'риорйМри╕рио рибрйЗриЯри╛ ри▓рйЛриб риХри░рии ри╡ри┐рй▒риЪ риЧри▓ридрйА:',
      usingDemo: 'рикрйНри░рижри░ри╕ри╝рии рижрйЗ риЙрижрйЗри╕ри╝ри╛риВ ри▓риИ рибрйИриорйЛ рибрйЗриЯри╛ рижрйА ри╡ри░ридрйЛриВ',
      view24Hour: '24-риШрй░риЯрйЗ рижрйА рикрйВри░ри╡-риЕриирйБриори╛рии рижрйЗриЦрйЛ',
      hourlyForecast: '24-риШрй░риЯрйЗ рижри╛ риорйМри╕рио рикрйВри░ри╡-риЕриирйБриори╛рии',
      placeholder: 'риЗрй▒риерйЗ риЖрикригри╛ ри╕рйБриирйЗри╣ри╛ риЯри╛риИрик риХри░рйЛ...',
      chatHistory: 'ЁЯТм риЪрйИриЯ риЗридри┐ри╣ри╛ри╕',
      settings: 'тЪЩя╕П ри╕рйИриЯри┐рй░риЧри╛риВ',
      profile: 'ЁЯСд рикрйНри░рйЛрилри╛риИри▓',
      helpSupport: 'тЭУ риорижриж риЕридрйЗ ри╕ри╣ри╛риЗридри╛',
      language: 'ЁЯМР ринри╛ри╕ри╝ри╛',
      selectLanguage: 'риЖрикригрйА ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ',
      otherLanguages: 'ри╣рйЛри░ ринри╛ри╕ри╝ри╛ри╡ри╛риВ',
      clickVisit: "'риЕризри┐риХри╛ри░рид ри╡рйИримри╕ри╛риИриЯ 'ридрйЗ риЬри╛риг ри▓риИ риХри▓ри┐риХ риХри░рйЛ'",
      menu: 'риорйИриирйВ'
    }
  },
  р┤ор┤▓р┤пр┤╛р┤│р┤В: {
    name: 'р┤ор┤▓р┤пр┤╛р┤│р┤В',
    code: 'ml',
    translations: {
      title: 'р┤Хр╡Гр┤╖р┤┐ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр┤│р╡Бр┤В р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤бр┤╛р┤╖р╡НтАМр┤мр╡Лр╡╝р┤бр╡Бр┤В',
      subtitle: 'р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤Хр╡Гр┤╖р┤┐ р┤др╡Ар┤░р╡Бр┤ор┤╛р┤ир┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤Хр╡Гр┤╖р┤┐ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛ р┤кр┤░р╡Нр┤пр┤╡р╡Зр┤Хр╡Нр┤╖р┤гр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Хр┤пр╡Бр┤В р┤др┤др╡Нр┤╕р┤ор┤п р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤Ер┤кр╡НтАМр┤бр╡Зр┤▒р╡Нр┤▒р╡Бр┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤Хр┤пр╡Бр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.',
      loadingWeather: 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤бр┤╛р┤▒р╡Нр┤▒ р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...',
      errorWeather: 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤бр┤╛р┤▒р╡Нр┤▒ р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир┤др┤┐р╡╜ р┤кр┤┐р┤╢р┤Хр╡Н:',
      usingDemo: 'р┤кр╡Нр┤░р┤жр╡╝р┤╢р┤и р┤Жр┤╡р┤╢р╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤бр╡Жр┤ор╡Л р┤бр┤╛р┤▒р╡Нр┤▒ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б',
      view24Hour: '24-р┤ор┤гр┤┐р┤Хр╡Нр┤Хр╡Вр╡╝ р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В р┤Хр┤╛р┤гр╡Бр┤Х',
      hourlyForecast: '24-р┤ор┤гр┤┐р┤Хр╡Нр┤Хр╡Вр╡╝ р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В',
      placeholder: 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р┤ир╡Нр┤жр╡Зр┤╢р┤В р┤Зр┤╡р┤┐р┤Яр╡Ж р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х...',
      chatHistory: 'ЁЯТм р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В',
      settings: 'тЪЩя╕П р┤Хр╡Нр┤░р┤ор╡Ар┤Хр┤░р┤гр┤Щр╡Нр┤Щр╡╛',
      profile: 'ЁЯСд р┤кр╡Нр┤░р╡Кр┤лр╡Ир╡╜',
      helpSupport: 'тЭУ р┤╕р┤╣р┤╛р┤пр┤╡р╡Бр┤В р┤кр┤┐р┤ир╡Нр┤др╡Бр┤гр┤пр╡Бр┤В',
      language: 'ЁЯМР р┤нр┤╛р┤╖',
      selectLanguage: 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
      otherLanguages: 'р┤ор┤▒р╡Нр┤▒р╡Н р┤нр┤╛р┤╖р┤Хр╡╛',
      clickVisit: 'р┤Фр┤жр╡Нр┤пр╡Лр┤Чр┤┐р┤Х р┤╡р╡Жр┤мр╡НтАМр┤╕р╡Ир┤▒р╡Нр┤▒р╡Н р┤╕р┤ир╡Нр┤жр╡╝р┤╢р┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр╡Нр┤▓р┤┐р┤Хр╡Нр┤Хр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х',
      menu: 'р┤ор╡Жр┤ир╡Б'
    }
  },
  Espa├▒ol: {
    name: 'Espa├▒ol',
    code: 'es',
    translations: {
      title: 'Esquemas Agr├нcolas y Panel Meteorol├│gico',
      subtitle: 'Explora los esquemas agr├нcolas del gobierno y obt├йn actualizaciones meteorol├│gicas en tiempo real para mejores decisiones agr├нcolas.',
      loadingWeather: 'Cargando datos meteorol├│gicos...',
      errorWeather: 'Error al cargar datos meteorol├│gicos:',
      usingDemo: 'Usando datos de demostraci├│n con fines de visualizaci├│n',
      view24Hour: 'Ver Pron├│stico de 24 Horas',
      hourlyForecast: 'Pron├│stico Meteorol├│gico de 24 Horas',
      placeholder: 'Escribe tu mensaje aqu├н...',
      chatHistory: 'ЁЯТм Historial de Chat',
      settings: 'тЪЩя╕П Configuraci├│n',
      profile: 'ЁЯСд Perfil',
      helpSupport: 'тЭУ Ayuda y Soporte',
      language: 'ЁЯМР Idioma',
      selectLanguage: 'Selecciona tu idioma',
      otherLanguages: 'Otros idiomas',
      clickVisit: 'Haz clic para visitar el sitio web oficial',
      menu: 'Men├║'
    }
  },
  Portugu├кs: {
    name: 'Portugu├кs',
    code: 'pt',
    translations: {
      title: 'Esquemas Agr├нcolas e Painel Meteorol├│gico',
      subtitle: 'Explore os esquemas agr├нcolas do governo e obtenha atualiza├з├╡es meteorol├│gicas em tempo real para melhores decis├╡es agr├нcolas.',
      loadingWeather: 'Carregando dados meteorol├│gicos...',
      errorWeather: 'Erro ao carregar dados meteorol├│gicos:',
      usingDemo: 'Usando dados de demonstra├з├гo para fins de exibi├з├гo',
      view24Hour: 'Ver Previs├гo de 24 Horas',
      hourlyForecast: 'Previs├гo Meteorol├│gica de 24 Horas',
      placeholder: 'Digite sua mensagem aqui...',
      chatHistory: 'ЁЯТм Hist├│rico de Chat',
      settings: 'тЪЩя╕П Configura├з├╡es',
      profile: 'ЁЯСд Perfil',
      helpSupport: 'тЭУ Ajuda e Suporte',
      language: 'ЁЯМР Idioma',
      selectLanguage: 'Selecione seu idioma',
      otherLanguages: 'Outros idiomas',
      clickVisit: 'Clique para visitar o site oficial',
      menu: 'Menu'
    }
  },
  'цЧецЬмшкЮ': {
    name: 'цЧецЬмшкЮ',
    code: 'ja',
    translations: {
      title: 'ш╛▓ценуВ╣уВнуГ╝уГауБиц░Чш▒буГАуГГуВ╖уГеуГЬуГ╝уГЙ',
      subtitle: 'уВИуВКшЙпуБДш╛▓ценц▒║хоЪуБоуБЯуВБуБлцФ┐х║ЬуБош╛▓ценуВ╣уВнуГ╝уГауВТцОвч┤вуБЧуАБуГкуВвуГлуВ┐уВдуГауБоц░Чш▒бцЫ┤цЦ░уВТхПЦх╛ЧуБЧуБжуБПуБауБХуБДуАВ',
      loadingWeather: 'ц░Чш▒буГЗуГ╝уВ┐уВТшкнуБ┐ш╛╝уВУуБзуБДуБ╛уБЩ...',
      errorWeather: 'ц░Чш▒буГЗуГ╝уВ┐уБошкнуБ┐ш╛╝уБ┐уВиуГйуГ╝:',
      usingDemo: 'шбичд║чЫочЪДуБзуГЗуГвуГЗуГ╝уВ┐уВТф╜┐чФиуБЧуБжуБДуБ╛уБЩ',
      view24Hour: '24цЩВщЦУф║Иха▒уВТшжЛуВЛ',
      hourlyForecast: '24цЩВщЦУц░Чш▒бф║Иха▒',
      placeholder: 'уБУуБУуБлуГбуГГуВ╗уГ╝уВ╕уВТхЕехКЫуБЧуБжуБПуБауБХуБД...',
      chatHistory: 'ЁЯТм уГБуГгуГГуГИх▒ецн┤',
      settings: 'тЪЩя╕П шинхоЪ',
      profile: 'ЁЯСд уГЧуГнуГХуВгуГ╝уГл',
      helpSupport: 'тЭУ уГШуГлуГЧуБиуВ╡уГЭуГ╝уГИ',
      language: 'ЁЯМР шиАшкЮ',
      selectLanguage: 'шиАшкЮуВТщБ╕цКЮуБЧуБжуБПуБауБХуБД',
      otherLanguages: 'уБЭуБоф╗ЦуБошиАшкЮ',
      clickVisit: 'хЕмх╝ПуВжуВзуГЦуВ╡уВдуГИуВТшикхХПуБЩуВЛуБлуБпуВпуГкуГГуВпуБЧуБжуБПуБауБХуБД',
      menu: 'уГбуГЛуГеуГ╝'
    }
  }
}

import React, { useState, useEffect } from 'react';
import { Send, Menu, X, Cloud, Sun, CloudRain, Thermometer, Droplets, Wind, ExternalLink } from 'lucide-react';

export default function Dashboard() {
  const [message, setMessage] = useState('');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [currentSchemeIndex, setCurrentSchemeIndex] = useState(0);
  const [weatherData, setWeatherData] = useState(null);
  const [hourlyData, setHourlyData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showHourlyModal, setShowHourlyModal] = useState(false);
  const [showLanguageModal, setShowLanguageModal] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('English');

  // Agricultural schemes data
  const agriculturalSchemes = [
    {
      scheme_name: "Pradhan Mantri Kisan Samman Nidhi (PM-KISAN)",
      link: "https://pmkisan.gov.in/"
    },
    {
      scheme_name: "Pradhan Mantri Fasal Bima Yojana (PMFBY)",
      link: "https://pmfby.gov.in/"
    },
    {
      scheme_name: "Pradhan Mantri Krishi Sinchayee Yojana (PMKSY)",
      link: "https://pmksy.gov.in/"
    },
    {
      scheme_name: "National Food Security Mission (NFSM)",
      link: "https://www.nfsm.gov.in/"
    },
    {
      scheme_name: "Kisan Credit Card (KCC)",
      link: "https://www.jansamarth.in/agri-loan-kisan-credit-card"
    },
    {
      scheme_name: "Paramparagat Krishi Vikas Yojana (PKVY)",
      link: "https://pgsindia-ncof.gov.in/pkvy/index.html"
    },
    {
      scheme_name: "Rashtriya Krishi Vikas Yojana (RKVY)",
      link: "https://rkvy.nic.in/"
    },
    {
      scheme_name: "e-NAM (National Agriculture Market)",
      link: "https://www.enam.gov.in/web/"
    },
    {
      scheme_name: "Soil Health Card Scheme",
      link: "https://soilhealth.dac.gov.in/"
    },
    {
      scheme_name: "Pradhan Mantri Kisan Maan-Dhan Yojana (PM-KMY)",
      link: "https://maandhan.in/"
    },
    {
      scheme_name: "Agriculture Infrastructure Fund (AIF)",
      link: "https://agriinfra.dac.gov.in/"
    },
    {
      scheme_name: "National Mission on Oilseeds and Oil Palm (NMOOP)",
      link: "https://nmoop.gov.in/"
    }
  ];

  // Handle scheme rotation
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentSchemeIndex((prev) => (prev + 1) % agriculturalSchemes.length);
    }, 6000); // Increased interval to 6 seconds for better readability

    return () => clearInterval(interval);
  }, [agriculturalSchemes.length]);

  // Fetch weather data
  useEffect(() => {
    const fetchWeatherData = async () => {
      try {
        setLoading(true);

        // Fetch 3-day forecast

        const Weather_Api_Key = '86Ils1zBsLLsuPH8BdJ1gUa9CEwno31F';
        const user_location = "Kharagpur";

        const forecastResponse = await fetch(
          `https://api.tomorrow.io/v4/weather/forecast?location=${user_location}&apikey=${Weather_Api_Key}`,
          {
            method: 'GET',
            headers: {
              'accept': 'application/json'
            }
          }
        );

        if (!forecastResponse.ok) throw new Error('Failed to fetch forecast data');
        const forecastData = await forecastResponse.json();

        // Fetch 24-hour timeline
        const timelineResponse = await fetch(
          `https://api.tomorrow.io/v4/timelines?apikey=${Weather_Api_Key}`,
          {
            method: 'POST',
            headers: {
              'accept': 'application/json',
              'content-type': 'application/json'
            },
            body: JSON.stringify({
              location: user_location,
              fields: ['temperature', 'humidity', 'windSpeed', 'weatherCode', 'precipitationProbability'],
              units: 'metric',
              timesteps: ['1h'],
              startTime: 'now',
              endTime: 'nowPlus24h'
            })
          }
        );

        if (!timelineResponse.ok) throw new Error('Failed to fetch timeline data');
        const timelineData = await timelineResponse.json();

        setWeatherData(forecastData);
        setHourlyData(timelineData);
        setError(null);
      } catch (err) {
        setError(err.message);
        console.error('Weather fetch error:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchWeatherData();
  }, []);

  const handleSendMessage = () => {
    if (message.trim()) {
      console.log('Redirecting with message:', message);
      setMessage('');
    }
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const toggleHourlyModal = () => {
    setShowHourlyModal(!showHourlyModal);
  };

  const handleSchemeClick = (link) => {
    window.open(link, '_blank', 'noopener,noreferrer');
  };

  const getWeatherIcon = (code) => {
    if (code <= 1100) return <Sun className="text-yellow-500" size={24} />;
    if (code <= 2100) return <Cloud className="text-gray-500" size={24} />;
    return <CloudRain className="text-blue-500" size={24} />;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric'
    });
  };

  const formatTime = (dateString) => {
    return new Date(dateString).toLocaleTimeString('en-US', {
      hour: 'numeric',
      hour12: true
    });
  };

  const styles = {
    container: {
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #e0f2fe 0%, #b3e5fc 100%)',
      position: 'relative',
      display: 'flex',
      flexDirection: 'column',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
    },
    hamburgerButton: {
      position: 'absolute',
      top: '16px',
      left: '16px',
      zIndex: 50,
      padding: '12px',
      backgroundColor: 'white',
      borderRadius: '12px',
      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',
      border: '1px solid #e2e8f0',
      cursor: 'pointer',
      transition: 'all 0.2s'
    },
    menuOverlay: {
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0,0,0,0.5)',
      zIndex: 40
    },
    sideMenu: {
      position: 'fixed',
      left: 0,
      top: 0,
      height: '100%',
      width: '288px',
      backgroundColor: 'white',
      boxShadow: '0 25px 50px rgba(0,0,0,0.25)',
      zIndex: 50,
      transform: 'translateX(0)',
      transition: 'transform 0.3s'
    },
    menuContent: {
      padding: '24px'
    },
    menuHeader: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: '32px'
    },
    menuTitle: {
      fontSize: '20px',
      fontWeight: '600',
      color: '#1f2937'
    },
    menuButton: {
      padding: '8px',
      borderRadius: '8px',
      cursor: 'pointer',
      border: 'none',
      background: 'transparent'
    },
    menuItem: {
      padding: '12px',
      borderRadius: '8px',
      cursor: 'pointer',
      color: '#374151',
      transition: 'background-color 0.2s',
      marginBottom: '8px'
    },
    movingModal: {
      position: 'absolute',
      top: '80px',
      left: 0,
      right: 0,
      height: '80px',
      overflow: 'hidden',
      zIndex: 30
    },
    movingContent: {
      position: 'absolute',
      whiteSpace: 'nowrap',
      height: '100%',
      display: 'flex',
      alignItems: 'center',
      animation: 'slideLeftToRight 12s linear infinite'
    },
    movingBox: {
      background: 'linear-gradient(135deg, #16a34a 0%, #22c55e 100%)',
      color: 'white',
      padding: '16px 32px',
      margin: '0 16px',
      borderRadius: '16px',
      boxShadow: '0 12px 30px rgba(34, 197, 94, 0.4)',
      minWidth: 'max-content',
      cursor: 'pointer',
      transition: 'all 0.3s',
      display: 'flex',
      alignItems: 'center',
      gap: '12px',
      border: '2px solid rgba(255, 255, 255, 0.2)'
    },
    schemeTitle: {
      fontSize: '18px',
      fontWeight: '600',
      marginBottom: '4px'
    },
    schemeSubtitle: {
      fontSize: '12px',
      opacity: '0.9',
      fontWeight: '400'
    },
    mainContent: {
      flex: 1,
      padding: '32px',
      marginTop: '144px',
      paddingBottom: '120px'
    },
    contentWrapper: {
      maxWidth: '1200px',
      margin: '0 auto'
    },
    title: {
      fontSize: '48px',
      fontWeight: 'bold',
      color: '#1f2937',
      marginBottom: '24px',
      textAlign: 'center'
    },
    subtitle: {
      fontSize: '20px',
      color: '#4b5563',
      marginBottom: '48px',
      lineHeight: '1.6',
      textAlign: 'center'
    },
    weatherSection: {
      marginBottom: '48px'
    },
    sectionTitle: {
      fontSize: '28px',
      fontWeight: '600',
      color: '#1f2937',
      marginBottom: '24px',
      textAlign: 'center'
    },
    weatherGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
      gap: '24px'
    },
    weatherCard: {
      backgroundColor: 'white',
      padding: '24px',
      borderRadius: '16px',
      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',
      border: '1px solid #dbeafe',
      transition: 'all 0.3s'
    },
    hourlyGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))',
      gap: '16px',
      maxHeight: '400px',
      overflowY: 'auto'
    },
    hourlyCard: {
      backgroundColor: 'white',
      padding: '16px',
      borderRadius: '12px',
      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      textAlign: 'center',
      border: '1px solid #e5e7eb'
    },
    loadingCard: {
      backgroundColor: 'white',
      padding: '48px',
      borderRadius: '16px',
      boxShadow: '0 10px 25px rgba(0,0,0,0.1)',
      textAlign: 'center',
      color: '#6b7280'
    },
    errorCard: {
      backgroundColor: '#fef2f2',
      padding: '24px',
      borderRadius: '16px',
      border: '1px solid #fecaca',
      textAlign: 'center',
      color: '#dc2626'
    },
    inputContainer: {
      position: 'fixed',
      bottom: 0,
      left: 0,
      right: 0,
      backgroundColor: 'white',
      borderTop: '1px solid #dbeafe',
      padding: '24px',
      zIndex: 40,
      boxShadow: '0 -10px 25px rgba(0,0,0,0.1)'
    },
    inputWrapper: {
      maxWidth: '1024px',
      margin: '0 auto',
      display: 'flex',
      gap: '12px',
      alignItems: 'flex-end'
    },
    inputField: {
      flex: 1,
      padding: '16px 24px',
      fontSize: '18px',
      border: '2px solid #bfdbfe',
      borderRadius: '16px',
      outline: 'none',
      backgroundColor: '#f0f9ff',
      transition: 'all 0.2s',
      height: '56px',
      boxSizing: 'border-box'
    },
    sendButton: {
      padding: '16px 24px',
      backgroundColor: '#3b82f6',
      color: 'white',
      borderRadius: '16px',
      border: 'none',
      cursor: 'pointer',
      transition: 'all 0.2s',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      boxShadow: '0 10px 25px rgba(59, 130, 246, 0.3)',
      height: '56px',
      minWidth: '56px'
    },
    sendButtonDisabled: {
      backgroundColor: '#d1d5db',
      cursor: 'not-allowed',
      boxShadow: 'none'
    },
    modalOverlay: {
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0,0,0,0.7)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 60
    },
    modal: {
      backgroundColor: 'white',
      borderRadius: '20px',
      padding: '32px',
      maxWidth: '900px',
      maxHeight: '80vh',
      width: '90%',
      overflowY: 'auto',
      boxShadow: '0 25px 50px rgba(0,0,0,0.3)'
    },
    modalHeader: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: '24px'
    },
    modalTitle: {
      fontSize: '24px',
      fontWeight: '600',
      color: '#1f2937'
    },
    closeButton: {
      padding: '8px',
      borderRadius: '50%',
      border: 'none',
      backgroundColor: '#f3f4f6',
      cursor: 'pointer',
      transition: 'all 0.2s'
    },
    viewForecastButton: {
      backgroundColor: '#3b82f6',
      color: 'white',
      padding: '12px 24px',
      borderRadius: '12px',
      border: 'none',
      cursor: 'pointer',
      fontSize: '16px',
      fontWeight: '500',
      transition: 'all 0.2s',
      boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)',
      display: 'block',
      margin: '0 auto'
    }
  };

  const currentScheme = agriculturalSchemes[currentSchemeIndex];

  return (
    <div style={styles.container}>
      {/* Hamburger Menu */}
      <button
        onClick={toggleMenu}
        style={styles.hamburgerButton}
        onMouseEnter={(e) => e.target.style.transform = 'scale(1.05)'}
        onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
      >
        <Menu size={24} color="#374151" />
      </button>

      {/* Side Menu */}
      {isMenuOpen && (
        <>
          <div style={styles.menuOverlay} onClick={toggleMenu} />
          <div style={styles.sideMenu}>
            <div style={styles.menuContent}>
              <div style={styles.menuHeader}>
                <h2 style={styles.menuTitle}>Menu</h2>
                <button
                  onClick={toggleMenu}
                  style={styles.menuButton}
                  onMouseEnter={(e) => e.target.style.backgroundColor = '#f3f4f6'}
                  onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                >
                  <X size={20} color="#6b7280" />
                </button>
              </div>
              <nav>
                {['ЁЯТм Chat History', 'тЪЩя╕П Settings', 'ЁЯСд Profile', 'тЭУ Help & Support'].map((item, index) => (
                  <div
                    key={index}
                    style={styles.menuItem}
                    onMouseEnter={(e) => e.target.style.backgroundColor = '#f0f9ff'}
                    onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                  >
                    {item}
                  </div>
                ))}
              </nav>
            </div>
          </div>
        </>
      )}

      {/* Moving Modal - Agricultural Schemes */}
      <div style={styles.movingModal}>
        <div style={styles.movingContent}>
          <div
            style={styles.movingBox}
            onClick={() => handleSchemeClick(currentScheme.link)}
            onMouseEnter={(e) => {
              e.target.style.transform = 'scale(1.05)';
              e.target.style.boxShadow = '0 15px 40px rgba(34, 197, 94, 0.5)';
            }}
            onMouseLeave={(e) => {
              e.target.style.transform = 'scale(1)';
              e.target.style.boxShadow = '0 12px 30px rgba(34, 197, 94, 0.4)';
            }}
          >
            <div>
              <div style={styles.schemeTitle}>
                {currentScheme.scheme_name}
              </div>
              <div style={styles.schemeSubtitle}>
                Click to visit official website
              </div>
            </div>
            <ExternalLink size={20} />
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div style={styles.mainContent}>
        <div style={styles.contentWrapper}>
          <h1 style={styles.title}>Welcome to AgriBot</h1>

          {/* Weather Forecast */}
          <div style={styles.weatherSection}>
            {loading ? (
              <div style={styles.loadingCard}>
                <div>Loading weather data...</div>
              </div>
            ) : error ? (
              <div style={styles.errorCard}>
                <div>Error loading weather data: {error}</div>
                <div style={{ fontSize: '14px', marginTop: '8px' }}>
                  Using demo data for display purposes
                </div>
              </div>
            ) : null}

            <div style={styles.weatherGrid}>
              {loading ? (
                Array.from({ length: 3 }).map((_, index) => (
                  <div key={index} style={styles.weatherCard}>
                    <div style={{ textAlign: 'center', color: '#9ca3af' }}>Loading...</div>
                  </div>
                ))
              ) : weatherData?.timelines?.daily?.slice(0, 3).map((day, index) => (
                <div
                  key={index}
                  style={styles.weatherCard}
                  onMouseEnter={(e) => e.target.style.transform = 'translateY(-5px)'}
                  onMouseLeave={(e) => e.target.style.transform = 'translateY(0)'}
                >
                  <div style={{ textAlign: 'center' }}>
                    <div style={{ fontSize: '18px', fontWeight: '600', marginBottom: '12px' }}>
                      {formatDate(day.time)}
                    </div>
                    <div style={{ marginBottom: '16px' }}>
                      {getWeatherIcon(day.values.weatherCodeMax)}
                    </div>
                    <div style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
                      {Math.round(day.values.temperatureMax)}┬░C / {Math.round(day.values.temperatureMin)}┬░C
                    </div>
                    <div style={{ display: 'flex', justifyContent: 'space-around', fontSize: '14px', color: '#6b7280' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                        <Droplets size={16} />
                        {Math.round(day.values.precipitationProbabilityMax)}%
                      </div>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                        <Wind size={16} />
                        {Math.round(day.values.windSpeedMax)} km/h
                      </div>
                    </div>
                  </div>
                </div>
              )) || (
                // Demo data fallback
                Array.from({ length: 3 }).map((_, index) => (
                  <div
                    key={index}
                    style={styles.weatherCard}
                    onMouseEnter={(e) => e.target.style.transform = 'translateY(-5px)'}
                    onMouseLeave={(e) => e.target.style.transform = 'translateY(0)'}
                  >
                    <div style={{ textAlign: 'center' }}>
                      <div style={{ fontSize: '18px', fontWeight: '600', marginBottom: '12px' }}>
                        {new Date(Date.now() + index * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', {
                          weekday: 'short',
                          month: 'short',
                          day: 'numeric'
                        })}
                      </div>
                      <div style={{ marginBottom: '16px' }}>
                        <Sun className="text-yellow-500" size={24} />
                      </div>
                      <div style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '8px' }}>
                        {22 + index}┬░C / {15 + index}┬░C
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-around', fontSize: '14px', color: '#6b7280' }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                          <Droplets size={16} />
                          {20 + index * 10}%
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                          <Wind size={16} />
                          {15 + index * 2} km/h
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* 24-Hour Forecast Button */}
            <div style={{ textAlign: 'center', marginTop: '32px' }}>
              <button
                onClick={toggleHourlyModal}
                style={styles.viewForecastButton}
                onMouseEnter={(e) => {
                  e.target.style.backgroundColor = '#2563eb';
                  e.target.style.transform = 'translateY(-2px)';
                }}
                onMouseLeave={(e) => {
                  e.target.style.backgroundColor = '#3b82f6';
                  e.target.style.transform = 'translateY(0)';
                }}
              >
                View Next 24-Hour Forecast
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* 24-Hour Forecast Modal */}
      {showHourlyModal && (
        <div style={styles.modalOverlay} onClick={toggleHourlyModal}>
          <div style={styles.modal} onClick={(e) => e.stopPropagation()}>
            <div style={styles.modalHeader}>
              <h2 style={styles.modalTitle}>24-Hour Weather Forecast</h2>
              <button
                onClick={toggleHourlyModal}
                style={styles.closeButton}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#e5e7eb'}
                onMouseLeave={(e) => e.target.style.backgroundColor = '#f3f4f6'}
              >
                <X size={20} color="#6b7280" />
              </button>
            </div>
            <div style={styles.hourlyGrid}>
              {loading ? (
                Array.from({ length: 24 }).map((_, index) => (
                  <div key={index} style={styles.hourlyCard}>
                    <div style={{ color: '#9ca3af', fontSize: '12px' }}>Loading...</div>
                  </div>
                ))
              ) : hourlyData?.data?.timelines?.[0]?.intervals?.slice(0, 24).map((hour, index) => (
                <div key={index} style={styles.hourlyCard}>
                  <div style={{ fontSize: '12px', fontWeight: '500', marginBottom: '8px' }}>
                    {formatTime(hour.startTime)}
                  </div>
                  <div style={{ marginBottom: '8px' }}>
                    {getWeatherIcon(hour.values.weatherCode)}
                  </div>
                  <div style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '4px' }}>
                    {Math.round(hour.values.temperature)}┬░C
                  </div>
                  <div style={{ fontSize: '10px', color: '#6b7280' }}>
                    {Math.round(hour.values.precipitationProbability)}%
                  </div>
                </div>
              )) || (
                // Demo data fallback
                Array.from({ length: 24 }).map((_, index) => (
                  <div key={index} style={styles.hourlyCard}>
                    <div style={{ fontSize: '12px', fontWeight: '500', marginBottom: '8px' }}>
                      {new Date(Date.now() + index * 60 * 60 * 1000).toLocaleTimeString('en-US', {
                        hour: 'numeric',
                        hour12: true
                      })}
                    </div>
                    <div style={{ marginBottom: '8px' }}>
                      <Sun className="text-yellow-500" size={20} />
                    </div>
                    <div style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '4px' }}>
                      {Math.round(20 + Math.sin(index / 4) * 5)}┬░C
                    </div>
                    <div style={{ fontSize: '10px', color: '#6b7280' }}>
                      {Math.max(0, 30 - index)}%
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      )}

      {/* Fixed Input Box */}
      <div style={styles.inputContainer}>
        <div style={styles.inputWrapper}>
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Type your message here..."
            style={styles.inputField}
            onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
            onBlur={(e) => e.target.style.borderColor = '#bfdbfe'}
          />
          <button
            onClick={handleSendMessage}
            disabled={!message.trim()}
            style={{
              ...styles.sendButton,
              ...(message.trim() ? {} : styles.sendButtonDisabled)
            }}
            onMouseEnter={(e) => {
              if (message.trim()) {
                e.target.style.backgroundColor = '#2563eb';
                e.target.style.transform = 'scale(1.05)';
              }
            }}
            onMouseLeave={(e) => {
              if (message.trim()) {
                e.target.style.backgroundColor = '#3b82f6';
                e.target.style.transform = 'scale(1)';
              }
            }}
          >
            <Send size={24} />
          </button>
        </div>
      </div>

      <style>{`
        @keyframes slideLeftToRight {
          0% {
            transform: translateX(-100vw);
          }
          100% {
            transform: translateX(100vw);
          }
        }
        
        * {
          box-sizing: border-box;
        }

        .text-yellow-500 {
          color: #eab308;
        }

        .text-gray-500 {
          color: #6b7280;
        }

        .text-blue-500 {
          color: #3b82f6;
        }
      `}</style>
    </div>
  );
}